-- ------------------------------------------------------------------------------------------------------------------------

-- Data Exploration
-- Housing data in London from 2001 - 2018

-- By Edward Renton

-- ------------------------------------------------------------------------------------------------------------------------

-- MySQL has a FULL GroupBy clause so I had to write a query to get around it.

-- ------------------------------------------------------------------------------------------------------------------------


SET SESSION sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));


-- ------------------------------------------------------------------------------------------------------------------------







-- ------------------------------------------------------------------------------------------------------------------------

-- Which year had the highest number of houses sold in London?

-- ------------------------------------------------------------------------------------------------------------------------

-- Taking the Year value from each of the dates and grouping by this, I can query only the yearly values.
-- Using the aggregate fucnction SUM I can add all the houses sold together for each year.


SELECT
	YEAR(date) year_date,
	SUM(houses_sold) AS Total_Sold,
	area
FROM
	LondonHousingMonthly
WHERE area = 'London' 
GROUP BY Year_Date
ORDER BY Total_Sold DESC;


-- From this data we can see that 2002, had the highest sum of houses sold across the year.
-- With 173,993 houses sold.

-- ------------------------------------------------------------------------------------------------------------------------







-- ------------------------------------------------------------------------------------------------------------------------

-- Which year had the lowest number of houses sold in London?

-- ------------------------------------------------------------------------------------------------------------------------

-- Following a similar structure as the previous query, we only need to change the order by to ASC.
-- This will enable us to see the lowest values first.

-- As 2019 and 2020 have some null values we will not include them in our analysis.


SELECT
	YEAR(date) year_date,
	SUM(houses_sold) AS Total_Sold,
	area
FROM
	LondonHousingMonthly
WHERE area = 'london' AND YEAR(date) BETWEEN 2001 AND 2018
GROUP BY Year_Date
ORDER BY Total_Sold ASC;


-- This shows that 2009 and 2008 were bad years for the housing market in London.
-- With 75,231 houses sold in 2009 and 80,921 houses sold in 2008.

-- ------------------------------------------------------------------------------------------------------------------------







-- ------------------------------------------------------------------------------------------------------------------------

-- What factors can we consider to have an effect on the change in the total number of houses sold per year?

-- ------------------------------------------------------------------------------------------------------------------------

-- Firstly, we can also include the average price of houses per year into our query.
-- As the price of the houses will affect how many are being sold.


SELECT
	YEAR(date) AS Year_Date,
	area,
	ROUND(AVG(average_price),0) AS Average_Price,
	SUM(houses_sold) AS Total_Sold
FROM
	LondonHousingMonthly
WHERE area = 'London' AND YEAR(date) BETWEEN 2001 AND 2018
GROUP BY Year_Date
ORDER BY YEAR_Date ASC;


-- From this data we can see a steady rise in the average price of the housing market in London.
-- Then a drop in 2008/09.

-- ------------------------------------------------------------------------------------------------------------------------

-- Secondly, looking at the yearly table, we can also query the mean salary per year (by area 'London').
-- This is because if people have more money on average then they are more likely to afford housing.

-- NOTE: There is no need to aggregate the yearly table as we are comparing the yearly values.
-- Therefore, it is only necessary to aggregate values from the Monthly table.


SELECT
	YEAR(date) AS Year_Date,
	area,
	mean_salary AS Average_Salary
FROM
	LondonHousingYearly
WHERE area = 'London' AND YEAR(date) BETWEEN 2001 AND 2018
GROUP BY date
ORDER BY Year_Date ASC;


-- Similary to the average price of houses, there is a rise across the years for the Average_Salary. 
-- Then in 2008-10 it drops and growth slows down.

-- ------------------------------------------------------------------------------------------------------------------------

-- Comparing the values from one year to that of the previous year.
-- Using the LAG window function I can do just this.

-- Allowing me to compare side by side the average price of that year next to the average price of the previous year.


SELECT
	YEAR(date) AS Year_Date,
	area,
	ROUND(AVG(average_price),0) AS Average_Price,
	LAG(ROUND(AVG(average_price),0)) OVER (ORDER BY YEAR(date)) AS Prev_Average_Price,
	SUM(houses_sold) AS Total_Sold,
	LAG(SUM(houses_sold)) OVER (ORDER BY YEAR(date)) AS Prev_Total_Sold
FROM
	LondonHousingMonthly
WHERE area = 'London' AND YEAR(date) BETWEEN 2001 AND 2018
GROUP BY Year_Date
ORDER BY Year_Date ASC;


-- In order to get a better understanding of this comparison.
-- I can then make a new column to work out the percentage change in the average price of houses per year..
-- I will then do the same to work out the percentage change in the total number of houses sold per year.


SELECT
	YEAR(date) AS Year_Date,
	area,
	ROUND(AVG(average_price),0) AS Average_Price,
	LAG(ROUND(AVG(average_price),0)) OVER (ORDER BY YEAR(date)) AS Prev_Average_Price,
	ROUND((AVG(average_price))/(LAG(AVG(average_price)) OVER (ORDER BY YEAR(date))),4) * 100 AS Avg_Price_Change,
	SUM(houses_sold) AS Total_Sold,
	LAG(SUM(houses_sold)) OVER (ORDER BY YEAR(date)) AS Prev_Total_Sold,
	ROUND((SUM(houses_sold))/(LAG(SUM(houses_sold)) OVER (ORDER BY YEAR(date))), 4) * 100 AS H_Sold_Change
FROM
	LondonHousingMonthly
WHERE area = 'London' AND YEAR(date) BETWEEN 2001 AND 2018
GROUP BY Year_Date
ORDER BY Year_Date ASC;


-- ------------------------------------------------------------------------------------------------------------------------

-- I will do the same thing for the yearly table.
-- In order to work out the percentage change of the average salary per year in London.


SELECT
	YEAR(date) AS Year_Date,
	area,
	mean_salary AS Average_Salary,
	LAG(mean_salary) OVER (ORDER BY YEAR(date)) AS Prev_Average_Salary,
	ROUND((mean_salary)/(LAG(mean_salary) OVER (ORDER BY YEAR(date))), 4) * 100 AS Salary_Change
FROM
	LondonHousingYearly
WHERE area = 'London' AND YEAR(date) BETWEEN 2001 AND 2018
GROUP BY date
ORDER BY Year_Date ASC;


-- Now we have 2 different queries, one which shows the change in average price and total number of houses sold per year.
-- One which shows the change in average salary per year.
-- All in 'London' and Between 2001 - 2018.

-- ------------------------------------------------------------------------------------------------------------------------

-- In order to conduct a better analysis, it will be good to have these two queries side by side for easier comparison.

-- Firstly, I will next the 2 queries into subqueries and then join then.
-- Selecting only the columns I need for my analysis.

	
SELECT
	X.Year_Date,
	X.area,
	X.Total_Sold,
	X.Average_Price,
	Y.Average_Salary,
	X.T_Sold_Change,
	X.AVG_Price_Change,
	Y.Salary_Change
FROM 
	(SELECT
	YEAR(date) AS Year_Date,
	area,
	code,
	ROUND(AVG(average_price),0) AS Average_Price,
	LAG(ROUND(AVG(average_price),0)) OVER (ORDER BY YEAR(date)) AS Prev_Average_Price,
	ROUND((AVG(average_price))/(LAG(AVG(average_price)) OVER (ORDER BY YEAR(date))),4) * 100 AS AVG_Price_Change,
	SUM(houses_sold) AS Total_Sold,
	LAG(SUM(houses_sold)) OVER (ORDER BY YEAR(date)) AS Prev_Total_Sold,
	ROUND((SUM(houses_sold))/(LAG(SUM(houses_sold)) OVER (ORDER BY YEAR(date))),4) * 100 AS T_Sold_Change
FROM
	LondonHousingMonthly
WHERE area = 'London' AND YEAR(date) BETWEEN 2001 AND 2018
GROUP BY Year_Date
ORDER BY Year_Date ASC) X
INNER JOIN
(SELECT
	YEAR(date) AS Year_Date,
	area,
	code,
	mean_salary AS Average_Salary,
	LAG(mean_salary) OVER (ORDER BY YEAR(date)) AS Prev_Average_Salary,
	ROUND((mean_salary)/(LAG(mean_salary) OVER (ORDER BY YEAR(date))),4) * 100 AS Salary_Change
FROM
	LondonHousingYearly
WHERE area = 'London' AND YEAR(date) BETWEEN 2001 AND 2018
GROUP BY date
ORDER BY Year_Date ASC) Y
ON X.Year_Date = Y.Year_Date AND X.code = Y.code;


-- ------------------------------------------------------------------------------------------------------------------------

-- Analysis of the changes in Average Salary, Average Price, and Total Houses Sold in London over the years:

-- ------------------------------------------------------------------------------------------------------------------------

-- A View will be created for easy access at a later date.


CREATE VIEW V_Comparison_Salary_Price_TSold AS
	SELECT
		X.Year_Date,
		X.area,
		X.Total_Sold,
		X.Average_Price,
		Y.Average_Salary,
		X.T_Sold_Change,
		X.AVG_Price_Change,
		Y.Salary_Change
	FROM 
		(SELECT
		YEAR(date) AS Year_Date,
		area,
		code,
		ROUND(AVG(average_price),0) AS Average_Price,
		LAG(ROUND(AVG(average_price),0)) OVER (ORDER BY YEAR(date)) AS Prev_Average_Price,
		ROUND((AVG(average_price))/(LAG(AVG(average_price)) OVER (ORDER BY YEAR(date))),4) * 100 AS AVG_Price_Change,
		SUM(houses_sold) AS Total_Sold,
		LAG(SUM(houses_sold)) OVER (ORDER BY YEAR(date)) AS Prev_Total_Sold,
		ROUND((SUM(houses_sold))/(LAG(SUM(houses_sold)) OVER (ORDER BY YEAR(date))),4) * 100 AS T_Sold_Change
	FROM
		LondonHousingMonthly
	WHERE area = 'London' AND YEAR(date) BETWEEN 2001 AND 2018
	GROUP BY Year_Date
	ORDER BY Year_Date ASC) X
	INNER JOIN
	(SELECT
		YEAR(date) AS Year_Date,
		area,
		code,
		mean_salary AS Average_Salary,
		LAG(mean_salary) OVER (ORDER BY YEAR(date)) AS Prev_Average_Salary,
		ROUND((mean_salary)/(LAG(mean_salary) OVER (ORDER BY YEAR(date))),4) * 100 AS Salary_Change
	FROM
		LondonHousingYearly
	WHERE area = 'London' AND YEAR(date) BETWEEN 2001 AND 2018
	GROUP BY date
	ORDER BY Year_Date ASC) Y
	ON X.Year_Date = Y.Year_Date AND X.code = Y.code;

-- Please refer to the Github Readme in the LondonHousingProject repository for the analysis.

-- ------------------------------------------------------------------------------------------------------------------------








-- ------------------------------------------------------------------------------------------------------------------------

-- Price-to-Income Ratio:

-- ------------------------------------------------------------------------------------------------------------------------

-- Using the Price-to-Income ratio I will determine how price affected the housing market in London,
-- this is done by comparing the Average Price to the Average Salary.

-- Price-to-Income ratio = (Average Price)/(Average Salary)

-- A join is required between the two tables as the average price is taken from the monthly table,
-- and the average salary is taken from the yearly table.


SELECT
	YEAR(m.date) AS Year_Date,
	m.area,
	SUM(houses_sold) AS Total_Sold,
	ROUND(AVG(m.average_price),0) AS Average_Price,
	y.mean_salary AS Average_Salary,
	ROUND((AVG(m.average_price))/(y.mean_salary),4) AS Price_to_Income
FROM
	LondonHousingMonthly m
JOIN
	LondonHousingYearly y 
ON
	YEAR(m.date) = YEAR(y.date) AND m.code = y.code
WHERE
	m.area = 'London' AND YEAR(m.date) BETWEEN 2001 AND 2018
GROUP BY
	Year_Date, m.area;


-- This ratio compares the average price of houses in a specific area to the average income of a specific area.

-- A higher ratio means it would take the person longer to save for a down payment,
-- or it would take a larger percent of their income to be able to pay off their mortgage.
-- A lower ratio means that housing is more affordable. 
-- Therefore, it will be more likely that people will buy a home.

-- ------------------------------------------------------------------------------------------------------------------------

-- Homeownership-Rate:

-- ------------------------------------------------------------------------------------------------------------------------

-- Comparing the total number of houses in london and the amount sold per year can help us further analyse the market.
-- This will give us the Homeownership-Rate. 

-- Homeownership-Rate = (Total sold)/(Total in the area)


SELECT
	YEAR(m.date) AS Year_Date,
	m.area,
	y.no_of_houses AS Total_houses,
	SUM(m.houses_sold) AS Total_Sold,
	(SUM(m.houses_sold))/(y.no_of_houses) AS Homeownership_Rate
FROM
	LondonHousingMonthly m
JOIN
	LondonHousingYearly y
ON
	YEAR(m.date) = YEAR(y.date) AND m.code = y.code
WHERE
	m.area = 'London' AND YEAR(m.date) BETWEEN 2001 AND 2018
GROUP BY
	Year_Date, m.area;


-- This ratio is a good indicator of housing affordability and stability within a community.

-- If the Homeownership_Rate is high, this means more people are able to afford homes within a community.
-- A lower rate shows that more people will be renting, which can show signs of a weak housing market.

-- ------------------------------------------------------------------------------------------------------------------------

-- Comparing Price-to-Income and Homeownership-Rate:

-- ------------------------------------------------------------------------------------------------------------------------

-- Comparing the 2 ratios side by side makes for a more convenient analysis.

-- Using the same queries as before, simply copying and pasting in the necessary columns into the SELECT statement.


SELECT
	YEAR(m.date) AS Year_Date,
	m.area,
	SUM(houses_sold) AS Total_Sold,
	ROUND(AVG(m.average_price),0) AS Average_Price,
	y.mean_salary AS Average_Salary,
	ROUND((AVG(m.average_price))/(y.mean_salary),4) AS Price_to_Income,
	(SUM(m.houses_sold))/(y.no_of_houses) AS Homeownership_Rate
FROM
	LondonHousingMonthly m
JOIN
	LondonHousingYearly y 
ON
	YEAR(m.date) = YEAR(y.date) AND m.code = y.code
WHERE
	m.area = 'London' AND YEAR(m.date) BETWEEN 2001 AND 2018
GROUP BY
	Year_Date, m.area;


-- ------------------------------------------------------------------------------------------------------------------------

-- Analysis of Price-to-Income and Homeownership-Rate:

-- ------------------------------------------------------------------------------------------------------------------------

-- A View will be created for easy access at a later date.


CREATE VIEW V_PriceToIncome_HomeownershipRate AS
	SELECT
		YEAR(m.date) AS Year_Date,
		m.area,
		SUM(houses_sold) AS Total_Sold,
		ROUND(AVG(m.average_price),0) AS Average_Price,
		y.mean_salary AS Average_Salary,
		ROUND((AVG(m.average_price))/(y.mean_salary),4) AS Price_to_Income,
		(SUM(m.houses_sold))/(y.no_of_houses) AS Homeownership_Rate
	FROM
		LondonHousingMonthly m
	JOIN
		LondonHousingYearly y 
	ON
		YEAR(m.date) = YEAR(y.date) AND m.code = y.code
	WHERE
		m.area = 'London' AND YEAR(m.date) BETWEEN 2001 AND 2018
	GROUP BY
		Year_Date, m.area;

-- Please refer to the Github Readme in the LondonHousingProject repository for the analysis.

-- ------------------------------------------------------------------------------------------------------------------------







-- ------------------------------------------------------------------------------------------------------------------------

-- Population-TotalHousing Ratio:

-- ------------------------------------------------------------------------------------------------------------------------

-- Comparing population of an area to number of houses in an area can aid us in our analysis,
-- of the demand and supply of the London Housing market.

-- Population affects the number of houses needed,
-- yet population itself will not have direct affect on demand as more than one person can live in each home.

-- Therefore, we will need to consider the Average Household Size in our calculation.
-- Google suggests this number to be '2.4' in London.

-- Total Households = (Population Size)/(2.4)


SELECT
	date,
	population_size,
	ROUND((population_size/2.4),0) AS Total_Households
FROM
	LondonHousingYearly
WHERE 
	area = 'London' AND YEAR(date) BETWEEN 2001 AND 2018
GROUP BY date;


-- ------------------------------------------------------------------------------------------------------------------------

-- To find a more accurate, Population-TotalHousing-Ratio, we will include Total Households in the ratio.

-- Population-TotalHousing Ratio = (Total Households)/(Total Number of Houses)


SELECT
	date,
	population_size,
	no_of_houses,
	ROUND((population_size/2.4),0) AS Total_Households,
	ROUND((population_size/2.4)/(no_of_houses),4) AS Pop_Housing_Ratio
FROM
	LondonHousingYearly
WHERE 
	area = 'London' AND YEAR(date) BETWEEN 2001 AND 2018
GROUP BY date, area;


-- The Population-TotalHousing Ratio will help us analyse population density of London over the years.

-- A ratio greater than 1 will mean there is over-crowding.
-- Lower than 1 can suggest that there is a surplus of housing in the area.

-- This ratio is not perfect, but gives us a better understand of total households and house availability.

-- ------------------------------------------------------------------------------------------------------------------------

-- Since this data is related to demand/supply it will be interesting to see how this affects the change in price over the years.

-- Therefore, I will compare this ratio to the Price-to-Income ratio which I created earlier, Average Price per year.

-- Once again I will have join the two tables.


SELECT
	YEAR(m.date) AS Year_Date,
	y.population_size,
	y.no_of_houses,
	ROUND((y.population_size/2.4),0) AS Total_Households,
	ROUND((y.population_size/2.4)/(y.no_of_houses),4) AS Pop_Housing_Ratio,
	ROUND((AVG(m.average_price))/(y.mean_salary),4) AS Price_to_Income,
	ROUND(AVG(m.average_price),2) AS AVG_Price
FROM
	LondonHousingMonthly m
JOIN
	LondonHousingYearly y 
ON
	YEAR(m.date) = YEAR(y.date) AND m.code = y.code
WHERE
	m.area = 'London' AND YEAR(m.date) BETWEEN 2001 AND 2018 AND YEAR(m.date) NOT BETWEEN 2008 AND 2013 
GROUP BY
	Year_Date, m.area
ORDER BY Year_Date ASC;


-- ------------------------------------------------------------------------------------------------------------------------

-- Analysis of Population and Housing Prices:

-- ------------------------------------------------------------------------------------------------------------------------

-- A View will be created for easy access at a later date.


CREATE VIEW V_Population_HousingAvailability_HousingPrice AS
	SELECT
		YEAR(m.date) AS Year_Date,
		y.population_size,
		y.no_of_houses,
		ROUND((y.population_size/2.4),0) AS Total_Households,
		ROUND((y.population_size/2.4)/(y.no_of_houses),4) AS Pop_Housing_Ratio,
		ROUND((AVG(m.average_price))/(y.mean_salary),4) AS Price_to_Income,
		ROUND(AVG(m.average_price),2) AS AVG_Price
	FROM
		LondonHousingMonthly m
	JOIN
		LondonHousingYearly y 
	ON
		YEAR(m.date) = YEAR(y.date) AND m.code = y.code
	WHERE
		m.area = 'London' AND YEAR(m.date) BETWEEN 2001 AND 2018 AND YEAR(m.date) NOT BETWEEN 2008 AND 2013 
	GROUP BY
		Year_Date, m.area
	ORDER BY Year_Date ASC;

-- Please refer to the Github Readme in the LondonHousingProject repository for the analysis.

-- ------------------------------------------------------------------------------------------------------------------------







-- ------------------------------------------------------------------------------------------------------------------------

-- Job-Density Ratio:

-- ------------------------------------------------------------------------------------------------------------------------

-- The Job-Density Ratio, shows the total number of jobs in an area and compares it tot he working population.
-- This ratio can also help us understand why an area might be more popular to live in.

-- Google estimates that 76.1% of people in the UK are of working age.
-- So I will adjust the population accordingly to retrieve this value for each year.

-- Job-Density Ratio = (0.761 * Population Size)/(Number of Jobs)


SELECT
	YEAR(date),
	number_of_jobs,
	population_size,
	ROUND((0.761 * population_size), 0) AS Working_Pop,
	ROUND((0.761 * population_size)/(number_of_jobs),2) AS Job_Density
FROM
	LondonHousingYearly y
WHERE area = 'London' AND YEAR(date) BETWEEN 2001 AND 2018
GROUP BY Year(date), area;


-- A high Job-Desnity Ratio means there are more people of working age than there are jobs available.

-- This number begins to drop in the later years 2014 onwards, 
-- which can also show that the economy recovered from the financial crisis in these years (1.16).

-- More jobs available in an area means the economy is healthy and growing, which is visible in the later years.
-- This is beneficial for the labour market as more people can work.

-- ------------------------------------------------------------------------------------------------------------------------

-- Job-Area Ratio:

-- ------------------------------------------------------------------------------------------------------------------------

-- The Job-Area Ratio shows the density of jobs available per. Km^2
-- This ratio can help us further analyse the number job opportunities of a specific area.
-- In this case London.

-- The area values given in the Yearly table is in hecters. To get Km^2 we simply have to times by 0.01.

-- Job-Area Ratio = (Number of Jobs)/(Area Size * 0.01)


SELECT
	YEAR(date),
	number_of_jobs,
	area_size * 0.01 AS Area_Km2,
	ROUND((number_of_jobs)/(area_size * 0.01),0) AS Job_Area
FROM
	LondonHousingYearly y
WHERE area = 'London' AND YEAR(date) BETWEEN 2001 AND 2018
GROUP BY Year(date), area;


-- A high Job-Area means there are a lot of jobs available per Km^2,
-- which will in turn increase demand for housing. 
-- A lower job density will signify the opposite, and suggests a less efficient economy.

-- ------------------------------------------------------------------------------------------------------------------------

-- Comparing the Job Ratios to the Housing Prices:

-- ------------------------------------------------------------------------------------------------------------------------

-- Comparing how Job-Density Ratio and Job-Area Ratio affects the housing price,
-- can be useful in our analysis of the London housing market over the years.

-- This is done by once again joining the tables, and including the Price-to-Income Ratio, 
-- and the Average House price per year.


SELECT
	YEAR(m.date) AS Year_Date,
	y.number_of_jobs,
	ROUND((0.761 * y.population_size), 0) AS Working_Pop,
	ROUND((0.761 * y.population_size)/(number_of_jobs),2) AS Job_Density,
	ROUND((y.number_of_jobs)/(y.area_size * 0.01),0) AS Job_Area,
	ROUND((AVG(m.average_price))/(y.mean_salary),4) AS Price_to_Income,
	ROUND(AVG(m.average_price),2) AS AVG_Price
FROM
	LondonHousingMonthly m
JOIN
	LondonHousingYearly y 
ON
	YEAR(m.date) = YEAR(y.date) AND m.code = y.code
WHERE
	m.area = 'London' AND YEAR(m.date) BETWEEN 2001 AND 2018
GROUP BY
	Year_Date, m.area
ORDER BY Year_Date ASC;


-- ------------------------------------------------------------------------------------------------------------------------

-- Analysis of the Job Ratios and Housing Prices in London between 2001-2018:

-- ------------------------------------------------------------------------------------------------------------------------

-- A View will be created for easy access at a later date.


CREATE VIEW V_JobRatios_HousingPrice AS
	SELECT
		YEAR(m.date) AS Year_Date,
		y.number_of_jobs,
		ROUND((0.761 * y.population_size), 0) AS Working_Pop,
		ROUND((0.761 * y.population_size)/(number_of_jobs),2) AS Job_Density,
		ROUND((y.number_of_jobs)/(y.area_size * 0.01),0) AS Job_Area,
		ROUND((AVG(m.average_price))/(y.mean_salary),4) AS Price_to_Income,
		ROUND(AVG(m.average_price),2) AS AVG_Price
	FROM
		LondonHousingMonthly m
	JOIN
		LondonHousingYearly y 
	ON
		YEAR(m.date) = YEAR(y.date) AND m.code = y.code
	WHERE
		m.area = 'London' AND YEAR(m.date) BETWEEN 2001 AND 2018
	GROUP BY
		Year_Date, m.area
	ORDER BY Year_Date ASC;

-- Please refer to the Github Readme in the LondonHousingProject repository for the analysis.

-- ------------------------------------------------------------------------------------------------------------------------






